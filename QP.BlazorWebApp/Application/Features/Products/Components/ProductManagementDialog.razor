@using MudBlazor
@using System.ComponentModel.DataAnnotations
@using QP.BlazorWebApp.Application.Features.Products.Model
@inherits ComponentBase

<MudDialog>
    <DialogContent>
        <MudForm @ref="_form" Model="_model" ValidityChanged="v => _valid = v">
            <MudTextField @bind-Value="_model.Name"
                          Label="Nombre"
                          For="@(() => _model.Name)"
                          Class="mb-3"
                          Variant="Variant.Outlined"
                          Margin="Margin.Dense" />

            <MudTextField @bind-Value="_model.Description"
                          Label="Descripción"
                          For="@(() => _model.Description)"
                          Lines="5"
                          TextArea="true"
                          FullWidth="true"
                          Variant="Variant.Outlined"
                          Margin="Margin.Dense" />

            <MudGrid>
                <MudItem xs="4">
                    <MudNumericField T="double?" @bind-Value="_model.Price"
                                     Label="Precio (€)"
                                     For="@(() => _model.Price)"
                                     Min="@(0)"
                                     Class="mb-3"
                                     Variant="Variant.Outlined"
                                     Margin="Margin.Dense" />
                </MudItem>
                <MudItem xs="4">
                    <MudAutocomplete @bind-Value="_model.Currency"
                                     SearchFunc="Search"
                                     For="@(() => _model.Currency)"
                                     Label="Divisa"
                                     Clearable="true"
                                     Variant="Variant.Outlined"
                                     Margin="Margin.Dense" />
                </MudItem>

                <MudItem xs="4">
                    <MudNumericField T="double?" @bind-Value="_model.TaxRate"
                                     Label="Taxrate"
                                     For="@(() => _model.TaxRate)"
                                     Min="@(0)"
                                     Immediate="true"
                                     Variant="Variant.Outlined"
                                     Margin="Margin.Dense"/>
                </MudItem>

            </MudGrid>

            <MudGrid>

                <MudItem xs="6">
                    <MudTextField @bind-Value="_model.Code"
                                  Label="Código de producto"
                                  For="@(() => _model.Code)"
                                  Class="mb-3"
                                  Variant="Variant.Outlined"
                                  Margin="Margin.Dense" />
                </MudItem>

                <MudItem xs="6">
                    <MudNumericField T="int?" @bind-Value="_model.Stock"
                                     Label="Stock"
                                     For="@(() => _model.Stock)"
                                     Min="@(0)"
                                     Immediate="true"
                                     Variant="Variant.Outlined"
                                     Margin="Margin.Dense" />
                </MudItem>

            </MudGrid>

        </MudForm>
    </DialogContent>

    <DialogActions>
        <div class="d-flex justify-content-between w-100">
            <MudButton OnClick="Cancel" Variant="Variant.Text" Color="Color.Secondary">
                Cancelar
            </MudButton>
            <MudButton OnClick="Save" Color="Color.Primary" Variant="Variant.Filled">
                @(IsEdit ? "Guardar cambios" : "Crear")
            </MudButton>
        </div>
    </DialogActions>


</MudDialog>

@code {
    [Parameter] public ProductDto? ProductParam { get; set; }

    [CascadingParameter] public IMudDialogInstance? MudDialog { get; set; }

    private ProductEditModel _model = new();
    private MudForm? _form;
    private bool IsEdit => ProductParam is not null;
    private string[] _currencies = { "USD", "EUR", "YEN" };
    protected override void OnParametersSet()
    {
        if (IsEdit)
        {
            _model = new ProductEditModel
            {
                Id = ProductParam!.Id,
                Name = ProductParam.Name,
                Price = ProductParam.Price.HasValue
                        ?ProductParam.Price.Value
                        : null
            };
        }
        else
        {
            _model = new ProductEditModel();
        }
    }

    private async Task Save()
    {
        if (_form is null) return;
        await _form.Validate();
        if (!_form.IsValid) return;

        var result = new ProductDto
        {
            Id = _model.Id,
            Name = _model.Name?.Trim(),
            Price = _model.Price.HasValue ? _model.Price.Value: null,
            Code = _model.Code,
            Categories = null,
            Currency = _model.Currency,
            Description = _model.Description,
            Stock = _model.Stock,
            TaxRate = _model.TaxRate
        };

        MudDialog?.Close(DialogResult.Ok(result));
    }

    private void Cancel() => MudDialog?.Cancel();

    private async Task<IEnumerable<string>> Search(string value, CancellationToken token)
    {
        await Task.Delay(5, token);

        if (string.IsNullOrEmpty(value))
        {
            return _currencies;
        }

        return _currencies.Where(x => x.Contains(value, StringComparison.InvariantCultureIgnoreCase));
    }
}
